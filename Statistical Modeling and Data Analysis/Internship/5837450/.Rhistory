for (rank in 1:3) {
plot_map(rank)
}
print(plots[[3]])
library(tidyverse)
library(readr)
library(knitr)
library(ggplot2)
library(reshape2)
library(lubridate)
library(dplyr)
ByMonthData <- read_csv("ByMonthData.csv")
ByYearData <- read_csv("ByYearData.csv")
# Loop over each age group
age_plots <- list()
for (age_group in names(month_matrices_by_age)) {
# Extract the data for the current age group
data_age_group <- month_matrices_by_age[[age_group]]
# Convert the data to long format for plotting
data_long <- data_age_group %>%
rownames_to_column(var = "Year_Month") %>%
pivot_longer(cols = -Year_Month, names_to = "Condition", values_to = "Deaths")
# Convert the Year_Month column to a date format
data_long$Year_Month <- ym(data_long$Year_Month)
# Create a line plot of deaths over time
p <- ggplot(data_long, aes(x = Year_Month, y = Deaths, color = Condition)) +
geom_line() +
labs(title = paste("Deaths in Age Group", age_group),
x = "Year-Month",
y = "Deaths")
# adds the plot
age_plots[[age_group]]
}
print(age_plots[["85+"]])
# Loop over each age group
age_plots <- list()
for (age_group in names(month_matrices_by_age)) {
# Extract the data for the current age group
data_age_group <- month_matrices_by_age[[age_group]]
# Convert the data to long format for plotting
data_long <- data_age_group %>%
rownames_to_column(var = "Year_Month") %>%
pivot_longer(cols = -Year_Month, names_to = "Condition", values_to = "Deaths")
# Convert the Year_Month column to a date format
data_long$Year_Month <- ym(data_long$Year_Month)
# Create a line plot of deaths over time
p <- ggplot(data_long, aes(x = Year_Month, y = Deaths, color = Condition)) +
geom_line() +
labs(title = paste("Deaths in Age Group", age_group),
x = "Year-Month",
y = "Deaths")
# adds the plot
age_plots[[age_group]]
age_group
}
print(age_plots[["85+"]])
# Loop over each age group
age_plots <- list()
for (age_group in names(month_matrices_by_age)) {
# Extract the data for the current age group
data_age_group <- month_matrices_by_age[[age_group]]
# Convert the data to long format for plotting
data_long <- data_age_group %>%
rownames_to_column(var = "Year_Month") %>%
pivot_longer(cols = -Year_Month, names_to = "Condition", values_to = "Deaths")
# Convert the Year_Month column to a date format
data_long$Year_Month <- ym(data_long$Year_Month)
# Create a line plot of deaths over time
p <- ggplot(data_long, aes(x = Year_Month, y = Deaths, color = Condition)) +
geom_line() +
labs(title = paste("Deaths in Age Group", age_group),
x = "Year-Month",
y = "Deaths")
# adds the plot
age_plots[[age_group]] <-p
}
print(age_plots[["85+"]])
# Loop over each age group
age_plots <- list()
for (age_group in names(month_matrices_by_age)) {
# Extract the data for the current age group
data_age_group <- month_matrices_by_age[[age_group]]
# Convert the data to long format for plotting
data_long <- data_age_group %>%
rownames_to_column(var = "Year_Month") %>%
pivot_longer(cols = -Year_Month, names_to = "Condition", values_to = "Deaths")
# Convert the Year_Month column to a date format
data_long$Year_Month <- ym(data_long$Year_Month)
# Create a line plot of deaths over time
p <- ggplot(data_long, aes(x = Year_Month, y = Deaths, color = Condition)) +
geom_line() +
labs(title = paste("Deaths in Age Group", age_group),
x = "Year-Month",
y = "Deaths")
# adds the plot
age_plots[[age_group]] <-p
}
print(age_plots[["0-24"]])
library(tidyverse)
library(readr)
library(knitr)
library(ggplot2)
library(dplyr)
library(lubridate)
AllAgesByYear <- read_csv("AllAgesByYear.csv")
AllAgesByMonth <- read_csv("AllAgesByMonth.csv")
myMatrix <- AllAgesByYear %>%
pivot_wider(names_from = Condition,
values_from = "COVID-19 Deaths") %>%
column_to_rownames(var = 'Year')
myMatrix
myMatrixMonth <- AllAgesByMonth %>%
pivot_wider(id_cols = c("Year", "Month"),
names_from = Condition,
values_from = "COVID-19 Deaths") %>%
unite("Year_Month", c("Year", "Month"), sep = "-") %>%
column_to_rownames(var = 'Year_Month')
myMatrixMonth
# Convert the contingency table into a data frame for plotting
plotdata <- myMatrix %>%
as.data.frame() %>%
rownames_to_column(var = "Year") %>%
pivot_longer(cols = -Year,
names_to = "Condition",
values_to = "COVID.19.Deaths")
# Create a bar chart for each year
p <- ggplot(plotdata, aes(x = Condition, y = COVID.19.Deaths, fill = Condition)) +
geom_col() +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the plot
p
# Convert the contingency table into a data frame for plotting (excluding COVID-19)
plotdata <- myMatrix[,!(colnames(myMatrix) %in% c("COVID-19"))] %>%
as.data.frame() %>%
rownames_to_column(var = "Year") %>%
pivot_longer(cols = -Year,
names_to = "Condition",
values_to = "COVID.19.Deaths")
# Create a bar chart for each year (excluding COVID-19)
p <- ggplot(plotdata, aes(x = Condition, y = COVID.19.Deaths, fill = Condition)) +
geom_col() +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the plot
p
# Calculate the total number of deaths for each year
total_deathsYears <- rowSums(myMatrix)
# Convert the row names of myMatrix (which represent the years) to a numeric vector
years <- as.numeric(rownames(myMatrix))
# Create a line plot of the total number of deaths over time
plot(years, total_deathsYears, type = "l", xlab = "Year", ylab = "Total COVID-19 Deaths", xlim = c(2020, 2023), xaxt = "n")
# Add custom tick marks and labels to the x-axis
axis(side = 1, at = 2020:2023, labels = 2020:2023)
# Calculate the total number of deaths for each year and month
total_deathsMonth <- rowSums(myMatrixMonth)
# Convert the row names of myMatrixMonth (which represent the years and months) to a Date vector
dates <- as.Date(paste0(rownames(myMatrixMonth), "-01"), format = "%Y-%m-%d")
# Set the scipen option to a large positive value to avoid scientific notation
options(scipen = 999)
# Create a line plot of the total number of deaths over time
plot(dates, total_deathsMonth, type = "l", xlab = "Year-Month", ylab = "Total COVID-19 Deaths", xaxt = "n")
# Add custom tick marks and labels to the x-axis
axis(side = 1, at = dates, labels = format(dates, "%b %Y"), cex.axis = 0.7)
myMatrixMonth$Year_Month <- rownames(myMatrixMonth)
myMatrixMonth_long <- pivot_longer(myMatrixMonth, cols = -Year_Month, names_to = "Condition", values_to = "Deaths")
# Convert Year_Month column to a date variable
myMatrixMonth_long$Year_Month <- as.Date(paste0(myMatrixMonth_long$Year_Month, "-01"), format = "%Y-%m-%d")
ggplot(myMatrixMonth_long, aes(x = Year_Month, y = Deaths, color = Condition)) +
geom_line() +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Assuming myMatrixMonth_long is a data frame with columns for Year_Month, Condition, and Deaths
myMatrixMonth_long$Year_Month <- as.Date(paste0(myMatrixMonth_long$Year_Month, "-01"), format = "%Y-%m-%d")
# Filter out COVID-19 deaths
myMatrixMonth_long_no_covid <- filter(myMatrixMonth_long, Condition != "COVID-19")
# Create a new column for the 6-month period
myMatrixMonth_long_no_covid$Period <- ifelse(month(myMatrixMonth_long_no_covid$Year_Month) <= 6, "Jan-Jun", "Jul-Dec")
myMatrixMonth_long_no_covid$Year_Period <- paste0(year(myMatrixMonth_long_no_covid$Year_Month), " ", myMatrixMonth_long_no_covid$Period)
# Calculate the total number of deaths for each condition in each 6-month period
deaths_by_period <- myMatrixMonth_long_no_covid %>%
group_by(Year_Period, Condition) %>%
summarize(Total_Deaths = sum(Deaths)) %>%
ungroup()
# Calculate the top 3 contributors to death for each 6-month period
top_3_by_period <- deaths_by_period %>%
group_by(Year_Period) %>%
top_n(3, Total_Deaths) %>%
ungroup()
top_3_by_period
library(tidyverse)
library(readr)
library(knitr)
library(ggplot2)
library(dplyr)
library(lubridate)
AllAgesByYear <- read_csv("AllAgesByYear.csv")
AllAgesByMonth <- read_csv("AllAgesByMonth.csv")
myMatrix <- AllAgesByYear %>%
pivot_wider(names_from = Condition,
values_from = "COVID-19 Deaths") %>%
column_to_rownames(var = 'Year')
myMatrix
myMatrixMonth <- AllAgesByMonth %>%
pivot_wider(id_cols = c("Year", "Month"),
names_from = Condition,
values_from = "COVID-19 Deaths") %>%
unite("Year_Month", c("Year", "Month"), sep = "-") %>%
column_to_rownames(var = 'Year_Month')
myMatrixMonth
myMatrix <- AllAgesByYear %>%
pivot_wider(names_from = Condition,
values_from = "COVID-19 Deaths") %>%
column_to_rownames(var = 'Year')
myMatrix
myMatrixMonth <- AllAgesByMonth %>%
pivot_wider(id_cols = c("Year", "Month"),
names_from = Condition,
values_from = "COVID-19 Deaths") %>%
unite("Year_Month", c("Year", "Month"), sep = "-") %>%
column_to_rownames(var = 'Year_Month')
myMatrixMonth
# Convert the contingency table into a data frame for plotting
plotdata <- myMatrix %>%
as.data.frame() %>%
rownames_to_column(var = "Year") %>%
pivot_longer(cols = -Year,
names_to = "Condition",
values_to = "COVID.19.Deaths")
# Create a bar chart for each year
p <- ggplot(plotdata, aes(x = Condition, y = COVID.19.Deaths, fill = Condition)) +
geom_col() +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the plot
p
# Convert the contingency table into a data frame for plotting
plotdata <- myMatrix %>%
as.data.frame() %>%
rownames_to_column(var = "Year") %>%
pivot_longer(cols = -Year,
names_to = "Condition",
values_to = "COVID.19.Deaths")
# Create a bar chart for each year
p <- ggplot(plotdata, aes(x = Condition, y = COVID.19.Deaths, fill = Condition)) +
geom_col() +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the plot
p
# Convert the contingency table into a data frame for plotting (excluding COVID-19)
plotdata <- myMatrix[,!(colnames(myMatrix) %in% c("COVID-19"))] %>%
as.data.frame() %>%
rownames_to_column(var = "Year") %>%
pivot_longer(cols = -Year,
names_to = "Condition",
values_to = "COVID.19.Deaths")
# Create a bar chart for each year (excluding COVID-19)
p <- ggplot(plotdata, aes(x = Condition, y = COVID.19.Deaths, fill = Condition)) +
geom_col() +
facet_wrap(~Year) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the plot
p
# Calculate the total number of deaths for each year
total_deathsYears <- rowSums(myMatrix)
# Convert the row names of myMatrix (which represent the years) to a numeric vector
years <- as.numeric(rownames(myMatrix))
# Create a line plot of the total number of deaths over time
plot(years, total_deathsYears, type = "l", xlab = "Year", ylab = "Total COVID-19 Deaths", xlim = c(2020, 2023), xaxt = "n")
# Add custom tick marks and labels to the x-axis
axis(side = 1, at = 2020:2023, labels = 2020:2023)
# Calculate the total number of deaths for each year and month
total_deathsMonth <- rowSums(myMatrixMonth)
# Convert the row names of myMatrixMonth (which represent the years and months) to a Date vector
dates <- as.Date(paste0(rownames(myMatrixMonth), "-01"), format = "%Y-%m-%d")
# Set the scipen option to a large positive value to avoid scientific notation
options(scipen = 999)
# Create a line plot of the total number of deaths over time
plot(dates, total_deathsMonth, type = "l", xlab = "Year-Month", ylab = "Total COVID-19 Deaths", xaxt = "n")
# Add custom tick marks and labels to the x-axis
axis(side = 1, at = dates, labels = format(dates, "%b %Y"), cex.axis = 0.7)
myMatrixMonth$Year_Month <- rownames(myMatrixMonth)
myMatrixMonth_long <- pivot_longer(myMatrixMonth, cols = -Year_Month, names_to = "Condition", values_to = "Deaths")
# Convert Year_Month column to a date variable
myMatrixMonth_long$Year_Month <- as.Date(paste0(myMatrixMonth_long$Year_Month, "-01"), format = "%Y-%m-%d")
ggplot(myMatrixMonth_long, aes(x = Year_Month, y = Deaths, color = Condition)) +
geom_line() +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Assuming myMatrixMonth_long is a data frame with columns for Year_Month, Condition, and Deaths
myMatrixMonth_long$Year_Month <- as.Date(paste0(myMatrixMonth_long$Year_Month, "-01"), format = "%Y-%m-%d")
# Filter out COVID-19 deaths
myMatrixMonth_long_no_covid <- filter(myMatrixMonth_long, Condition != "COVID-19")
# Create a new column for the 6-month period
myMatrixMonth_long_no_covid$Period <- ifelse(month(myMatrixMonth_long_no_covid$Year_Month) <= 6, "Jan-Jun", "Jul-Dec")
myMatrixMonth_long_no_covid$Year_Period <- paste0(year(myMatrixMonth_long_no_covid$Year_Month), " ", myMatrixMonth_long_no_covid$Period)
# Calculate the total number of deaths for each condition in each 6-month period
deaths_by_period <- myMatrixMonth_long_no_covid %>%
group_by(Year_Period, Condition) %>%
summarize(Total_Deaths = sum(Deaths)) %>%
ungroup()
# Calculate the top 3 contributors to death for each 6-month period
top_3_by_period <- deaths_by_period %>%
group_by(Year_Period) %>%
top_n(3, Total_Deaths) %>%
ungroup()
top_3_by_period
library(tidyverse)
library(readr)
library(knitr)
library(ggplot2)
library(reshape2)
library(lubridate)
library(dplyr)
ByMonthData <- read_csv("ByMonthData.csv")
ByYearData <- read_csv("ByYearData.csv")
# Define the age groups
age_groups <- c("0-24", "25-34", "35-44", "45-54", "55-64", "65-74", "75-84", "85+")
# Split the data by age group
monthly_data_by_age <- split(ByMonthData, ByMonthData$`Age Group`)
yearly_data_by_age <- split(ByYearData, ByYearData$`Age Group`)
# Create a list of matrices for each age group
month_matrices_by_age <- lapply(monthly_data_by_age[age_groups], function(dataMonth) {
dataMonth %>%
pivot_wider(id_cols = c("Year", "Month"),
names_from = Condition,
values_from = "COVID-19 Deaths") %>%
unite("Year_Month", c("Year", "Month"), sep = "-") %>%
column_to_rownames(var = 'Year_Month')
})
yearly_matrices_by_age <- lapply(yearly_data_by_age[age_groups], function(dataYear) {
dataYear %>%
pivot_wider(id_cols = c("Year"),
names_from = Condition,
values_from = "COVID-19 Deaths") %>%
column_to_rownames(var = 'Year')
})
month_matrices_by_age
yearly_matrices_by_age
# Set the scipen option to a large positive value to avoid scientific notation
options(scipen = 999)
# Calculate the maximum y value in your data
max_y <- max(unlist(month_matrices_by_age))
# Create an empty plot with modified ylim
plot(NA, xlim = range(dates), ylim = c(0, max_y * 4), xlab = "Year-Month", ylab = "Total COVID-19 Deaths", xaxt = "n")
# Add custom tick marks and labels to the x-axis
axis(side = 1, at = dates, labels = format(dates, "%b %Y"), cex.axis = 0.7)
# Loop over the list of matrices and add a line to the plot for each age group
for (i in seq_along(month_matrices_by_age)) {
# Calculate the total number of deaths for each year and month
total_deaths <- rowSums(month_matrices_by_age[[i]])
# Convert the row names of myMatrixMonth (which represent the years and months) to a Date vector
dates <- as.Date(paste0(rownames(month_matrices_by_age[[i]]), "-01"), format = "%Y-%m-%d")
# Add a line to the plot for this age group
lines(dates, total_deaths, col = i)
}
# Add a legend to the plot
legend("topleft", legend = names(month_matrices_by_age), col = seq_along(month_matrices_by_age), lty = 1, cex = 0.65)
# Set the scipen option to a large positive value to avoid scientific notation
options(scipen = 999)
# Calculate the maximum y value in your data
max_y <- max(unlist(yearly_matrices_by_age))
# Create an empty plot with modified ylim
plot(NA, xlim = range(years), ylim = c(0, max_y * 6.5), xlab = "Year", ylab = "Total COVID-19 Deaths", xaxt = "n")
# Add custom tick marks and labels to the x-axis
axis(side = 1, at = years, labels = years, cex.axis = 0.7)
# Loop over the list of matrices and add a line to the plot for each age group
for (i in seq_along(yearly_matrices_by_age)) {
# Calculate the total number of deaths for each year
total_deaths <- rowSums(yearly_matrices_by_age[[i]])
# Convert the row names of myMatrixYear (which represent the years) to a numeric vector
years <- as.numeric(rownames(yearly_matrices_by_age[[i]]))
# Add a line to the plot for this age group
lines(years, total_deaths, col = i)
}
# Add a legend to the plot
legend("topleft", legend = names(yearly_matrices_by_age), col = seq_along(yearly_matrices_by_age), lty = 1, cex = 0.65)
top_contributors_by_age <- lapply(month_matrices_by_age, function(mat) {
colSums(mat) %>%
sort(decreasing = TRUE) %>%
head(3) %>%
names()
})
top_contributors_by_age
# Create a data frame for plotting
plot_data <- data.frame(Age_Group = character(),
Condition = character(),
Deaths = numeric())
for (age_group in names(top_contributors_by_age)) {
mat <- month_matrices_by_age[[age_group]]
top_contributors <- top_contributors_by_age[[age_group]]
for (contributor in top_contributors) {
plot_data <- rbind(plot_data,
data.frame(Age_Group = age_group,
Condition = contributor,
Deaths = sum(mat[,contributor])))
}
}
# Create the plot
ggplot(plot_data, aes(x = Age_Group, y = Deaths, fill = Condition)) +
geom_col(position = "dodge") +
labs(title = "Top 3 Contributors to Death by Age Group",
x = "Age Group",
y = "Deaths")
top_contributors_by_age_no_covid <- lapply(month_matrices_by_age, function(mat) {
mat_no_covid <- mat[,colnames(mat) != "COVID-19"]
colSums(mat_no_covid) %>%
sort(decreasing = TRUE) %>%
head(3) %>%
names()
})
top_contributors_by_age_no_covid
# Create a data frame for plotting
plot_data <- data.frame(Age_Group = character(),
Condition = character(),
Deaths = numeric())
for (age_group in names(top_contributors_by_age_no_covid)) {
mat <- month_matrices_by_age[[age_group]]
top_contributors <- top_contributors_by_age_no_covid[[age_group]]
for (contributor in top_contributors) {
plot_data <- rbind(plot_data,
data.frame(Age_Group = age_group,
Condition = contributor,
Deaths = sum(mat[,contributor])))
}
}
# Create the plot
ggplot(plot_data, aes(x = Age_Group, y = Deaths, fill = Condition)) +
geom_col(position = "dodge") +
labs(title = "Top 3 Contributors to Death by Age Group",
x = "Age Group",
y = "Deaths")
# Loop over each age group
age_plots <- list()
for (age_group in names(month_matrices_by_age)) {
# Extract the data for the current age group
data_age_group <- month_matrices_by_age[[age_group]]
# Convert the data to long format for plotting
data_long <- data_age_group %>%
rownames_to_column(var = "Year_Month") %>%
pivot_longer(cols = -Year_Month, names_to = "Condition", values_to = "Deaths")
# Convert the Year_Month column to a date format
data_long$Year_Month <- ym(data_long$Year_Month)
# Create a line plot of deaths over time
p <- ggplot(data_long, aes(x = Year_Month, y = Deaths, color = Condition)) +
geom_line() +
labs(title = paste("Deaths in Age Group", age_group),
x = "Year-Month",
y = "Deaths")
# adds the plot
age_plots[[age_group]] <-p
}
print(age_plots[["0-24"]])
age_groups <- c("0-24", "25-34", "35-44", "45-54", "55-64", "65-74", "75-84", "85+")
for (age_group in age_groups) {
data_age_group <- month_matrices_by_age[[age_group]]
# calculate the total number of deaths for each month
monthly_deaths <- rowSums(data_age_group)
# define the bin boundaries
breaks <- pretty(monthly_deaths, n = 5)
# group the data into bins
monthly_deaths_binned <- cut(monthly_deaths, breaks = breaks, dig.lab = 5)
# Extract the levels of the monthly_deaths_binned factor variable
bin_levels <- levels(monthly_deaths_binned)
# count the number of occurrences of each outcome
counts <- table(monthly_deaths_binned)
# calculate the probabilities for each outcome
prob <- counts / sum(counts)
# create a data frame with the outcomes and probabilities
data_pmf <- data.frame(deaths = names(prob), prob)
data_pmf$deaths <- factor(data_pmf$deaths, levels = bin_levels)
# plot the PMF using ggplot2
p <- ggplot(data_pmf, aes(deaths, prob)) +
geom_bar(stat = "identity", color = "black", fill = "white", width = 0.9) +
scale_x_discrete(labels = function(x) format(x, scientific = FALSE)) +
ggtitle(paste0("PMF Plot for Age Group ", age_group)) +
xlab("Monthly Deaths (binned)") +
ylab("P(X = x)")
print(p)
}
# Convert monthly_deaths to a time series object
monthly_deaths_ts <- ts(monthly_deaths, start = c(2020, 1), frequency = 12)
# Subset the time series to include only the relevant time periods
before <- window(monthly_deaths_ts, end = c(2021, 7))
after <- window(monthly_deaths_ts, start = c(2021, 8))
# Calculate the mean number of deaths before and after August 2021
mean_before <- mean(before)
mean_after <- mean(after)
sd(after)
length(after)
monthly_deaths_ts
# Conduct a one-sample t-test to compare the mean after August 2021 to the mean before August 2021
t.test(after, mu = mean_before)
# Add a small amount of random noise to the data
after
before_jittered <- jitter(before)
after_jittered <- jitter(after)
# Perform the Wilcoxon Signed-Rank Test on the jittered data
wilcox.test(before_jittered, after_jittered, paired = FALSE)
View(month_matrices_by_age)
month_matrices_by_age[["0-24"]][["Chronic lower respiratory diseases"]]
total_deaths_by_condition <- Reduce(`+`, month_matrices_by_age)
total_deaths_by_condition[order(total_deaths_by_condition[1,], decreasing = TRUE),]
total_deaths_by_condition
total_deaths_by_condition <- Reduce(`+`, month_matrices_by_age[["0-24"]])
total_deaths_by_condition[order(total_deaths_by_condition[1,], decreasing = TRUE),]
total_deaths_by_condition <- Reduce(`+`, yearly_matrices_by_age[["0-24"]])
total_deaths_by_condition[order(total_deaths_by_condition[1,], decreasing = TRUE),]
str(yearly_matrices_by_age[["0-24"]])
total_deaths_by_condition <- colSums(yearly_matrices_by_age[["0-24"]])
total_deaths_by_condition[order(total_deaths_by_condition, decreasing = TRUE)]
